{"intents": [{"tag": "voiceover", "patterns": ["Question about voiceover?", "about voiceover?", "question about voiceover?", "voiceover interview question?"], "responses": ["How much experience do you have testing with VoiceOver?"]}, {"tag": "dynamic", "patterns": ["Question about dynamic?", "about dynamic?", "question about dynamic?", "dynamic interview question?"], "responses": ["How would you explain Dynamic Type to a new iOS developer?"]}, {"tag": "apps", "patterns": ["Question about apps?", "about apps?", "question about apps?", "apps interview question?"], "responses": ["What are the main problems we need to solve when making accessible apps?"]}, {"tag": "apps", "patterns": ["Question about apps?", "about apps?", "question about apps?", "apps interview question?"], "responses": ["What accommodations have you added to apps to make them more accessible?"]}, {"tag": "dictionary", "patterns": ["Question about dictionary?", "about dictionary?", "question about dictionary?", "dictionary interview question?"], "responses": ["How is a dictionary different from an array?"]}, {"tag": "structs", "patterns": ["Question about structs?", "about structs?", "question about structs?", "structs interview question?"], "responses": ["What are the main differences between classes and structs in Swift?"]}, {"tag": "tuples", "patterns": ["Question about tuples?", "about tuples?", "question about tuples?", "tuples interview question?"], "responses": ["What are tuples and why are they useful?"]}, {"tag": "codable", "patterns": ["Question about codable?", "about codable?", "question about codable?", "codable interview question?"], "responses": ["What does the Codable protocol do?"]}, {"tag": "array", "patterns": ["Question about array?", "about array?", "question about array?", "array interview question?"], "responses": ["What is the difference between an array and a set?"]}, {"tag": "cgfloat", "patterns": ["Question about cgfloat?", "about cgfloat?", "question about cgfloat?", "cgfloat interview question?"], "responses": ["What is the difference between the Float, Double, and CGFloat data types?"]}, {"tag": "codable", "patterns": ["Question about codable?", "about codable?", "question about codable?", "codable interview question?"], "responses": ["What\u2019s the importance of key decoding strategies when using Codable?"]}, {"tag": "compactmap", "patterns": ["Question about compactmap?", "about compactmap?", "question about compactmap?", "compactmap interview question?"], "responses": ["When using arrays, what\u2019s the difference between map() and compactMap()?"]}, {"tag": "immutability", "patterns": ["Question about immutability?", "about immutability?", "question about immutability?", "immutability interview question?"], "responses": ["Why is immutability important?"]}, {"tag": "ranges", "patterns": ["Question about ranges?", "about ranges?", "question about ranges?", "ranges interview question?"], "responses": ["What are one-sided ranges and when would you use them?"]}, {"tag": "collections", "patterns": ["Question about collections?", "about collections?", "question about collections?", "collections interview question?"], "responses": ["What does it mean when we say \u201cstrings are collections in Swift\u201d?"]}, {"tag": "uuid", "patterns": ["Question about uuid?", "about uuid?", "question about uuid?", "uuid interview question?"], "responses": ["What is a UUID, and when might you use it?"]}, {"tag": "type", "patterns": ["Question about type?", "about type?", "question about type?", "type interview question?"], "responses": ["What's the difference between a value type and a reference type?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["When would you use Swift\u2019s Result type?"]}, {"tag": "erasure", "patterns": ["Question about erasure?", "about erasure?", "question about erasure?", "erasure interview question?"], "responses": ["What is type erasure and when would you use it?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How would you explain delegates to a new Swift developer?"]}, {"tag": "mvc", "patterns": ["Question about mvc?", "about mvc?", "question about mvc?", "mvc interview question?"], "responses": ["Can you explain MVC, and how it's used on Apple's platforms?"]}, {"tag": "mvvm", "patterns": ["Question about mvvm?", "about mvvm?", "question about mvvm?", "mvvm interview question?"], "responses": ["Can you explain MVVM, and how it might be used on Apple's platforms?"]}, {"tag": "dependency", "patterns": ["Question about dependency?", "about dependency?", "question about dependency?", "dependency interview question?"], "responses": ["How would you explain dependency injection to a junior developer?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How would you explain protocol-oriented programming to a new Swift developer?"]}, {"tag": "programming", "patterns": ["Question about programming?", "about programming?", "question about programming?", "programming interview question?"], "responses": ["What experience do you have of functional programming?"]}, {"tag": "kvo", "patterns": ["Question about kvo?", "about kvo?", "question about kvo?", "kvo interview question?"], "responses": ["Can you explain KVO, and how it's used on Apple's platforms?"]}, {"tag": "singletons", "patterns": ["Question about singletons?", "about singletons?", "question about singletons?", "singletons interview question?"], "responses": ["Can you give some examples of where singletons might be a good idea?"]}, {"tag": "phantom", "patterns": ["Question about phantom?", "about phantom?", "question about phantom?", "phantom interview question?"], "responses": ["What are phantom types and when would you use them?"]}, {"tag": "cloudkit", "patterns": ["Question about cloudkit?", "about cloudkit?", "question about cloudkit?", "cloudkit interview question?"], "responses": ["How does CloudKit differ from Core Data?"]}, {"tag": "spritekit", "patterns": ["Question about spritekit?", "about spritekit?", "question about spritekit?", "spritekit interview question?"], "responses": ["How does SpriteKit differ from SceneKit?"]}, {"tag": "core", "patterns": ["Question about core?", "about core?", "question about core?", "core interview question?"], "responses": ["How much experience do you have using Core Data? Can you give examples?"]}, {"tag": "graphics", "patterns": ["Question about graphics?", "about graphics?", "question about graphics?", "graphics interview question?"], "responses": ["How much experience do you have using Core Graphics? Can you give examples?"]}, {"tag": "content", "patterns": ["Question about content?", "about content?", "question about content?", "content interview question?"], "responses": ["What are the different ways of showing web content to users?"]}, {"tag": "directory", "patterns": ["Question about directory?", "about directory?", "question about directory?", "directory interview question?"], "responses": ["What class would you use to list files in a directory?"]}, {"tag": "userdefaults", "patterns": ["Question about userdefaults?", "about userdefaults?", "question about userdefaults?", "userdefaults interview question?"], "responses": ["What is UserDefaults good for? What is UserDefaults not good for?"]}, {"tag": "notificationcenter", "patterns": ["Question about notificationcenter?", "about notificationcenter?", "question about notificationcenter?", "notificationcenter interview question?"], "responses": ["What is the purpose of NotificationCenter?"]}, {"tag": "network", "patterns": ["Question about network?", "about network?", "question about network?", "network interview question?"], "responses": ["What steps would you follow to make a network request?"]}, {"tag": "cgaffinetransform", "patterns": ["Question about cgaffinetransform?", "about cgaffinetransform?", "question about cgaffinetransform?", "cgaffinetransform interview question?"], "responses": ["When would you use CGAffineTransform?"]}, {"tag": "core", "patterns": ["Question about core?", "about core?", "question about core?", "core interview question?"], "responses": ["How much experience do you have using Core Image? Can you give examples?"]}, {"tag": "ibeacons", "patterns": ["Question about ibeacons?", "about ibeacons?", "question about ibeacons?", "ibeacons interview question?"], "responses": ["How much experience do you have using iBeacons? Can you give examples?"]}, {"tag": "storekit", "patterns": ["Question about storekit?", "about storekit?", "question about storekit?", "storekit interview question?"], "responses": ["How much experience do you have using StoreKit? Can you give examples?"]}, {"tag": "gcd", "patterns": ["Question about gcd?", "about gcd?", "question about gcd?", "gcd interview question?"], "responses": ["How much experience do you have with GCD?"]}, {"tag": "sound", "patterns": ["Question about sound?", "about sound?", "question about sound?", "sound interview question?"], "responses": ["What class would you use to play a custom sound in your app?"]}, {"tag": "nsattributedstring", "patterns": ["Question about nsattributedstring?", "about nsattributedstring?", "question about nsattributedstring?", "nsattributedstring interview question?"], "responses": ["What experience do you have of NSAttributedString?"]}, {"tag": "gameplaykit", "patterns": ["Question about gameplaykit?", "about gameplaykit?", "question about gameplaykit?", "gameplaykit interview question?"], "responses": ["What is the purpose of GameplayKit?"]}, {"tag": "replaykit", "patterns": ["Question about replaykit?", "about replaykit?", "question about replaykit?", "replaykit interview question?"], "responses": ["What is the purpose of ReplayKit?"]}, {"tag": "nssortdescriptor", "patterns": ["Question about nssortdescriptor?", "about nssortdescriptor?", "question about nssortdescriptor?", "nssortdescriptor interview question?"], "responses": ["When might you use NSSortDescriptor?"]}, {"tag": "subclasses", "patterns": ["Question about subclasses?", "about subclasses?", "question about subclasses?", "subclasses interview question?"], "responses": ["Can you name at least three different CALayer subclasses?"]}, {"tag": "cadisplaylink", "patterns": ["Question about cadisplaylink?", "about cadisplaylink?", "question about cadisplaylink?", "cadisplaylink interview question?"], "responses": ["What is the purpose of CADisplayLink?"]}, {"tag": "layouts", "patterns": ["Question about layouts?", "about layouts?", "question about layouts?", "layouts interview question?"], "responses": ["How do you create your UI layouts \u2013\u00a0storyboards or in code?"]}, {"tag": "shadow", "patterns": ["Question about shadow?", "about shadow?", "question about shadow?", "shadow interview question?"], "responses": ["How would you add a shadow to one of your views?"]}, {"tag": "corners", "patterns": ["Question about corners?", "about corners?", "question about corners?", "corners interview question?"], "responses": ["How would you round the corners of one of your views?"]}, {"tag": "swiftui", "patterns": ["Question about swiftui?", "about swiftui?", "question about swiftui?", "swiftui interview question?"], "responses": ["What are the advantages and disadvantages of SwiftUI compared to UIKit?"]}, {"tag": "ios", "patterns": ["Question about ios?", "about ios?", "question about ios?", "ios interview question?"], "responses": ["What do you think is a sensible minimum iOS deployment target?"]}, {"tag": "ios", "patterns": ["Question about ios?", "about ios?", "question about ios?", "ios interview question?"], "responses": ["What features of recent iOS versions were you most excited to try?"]}, {"tag": "settings", "patterns": ["Question about settings?", "about settings?", "question about settings?", "settings interview question?"], "responses": ["What kind of settings would you store in your Info.plist file?"]}, {"tag": "classes", "patterns": ["Question about classes?", "about classes?", "question about classes?", "classes interview question?"], "responses": ["What is the purpose of size classes?"]}, {"tag": "uicolor", "patterns": ["Question about uicolor?", "about uicolor?", "question about uicolor?", "uicolor interview question?"], "responses": ["What happens when Color or UIColor has values outside 0 to 1?"]}, {"tag": "code", "patterns": ["Question about code?", "about code?", "question about code?", "code interview question?"], "responses": ["Can you talk me through some interesting code you wrote recently?"]}, {"tag": "newsletters", "patterns": ["Question about newsletters?", "about newsletters?", "question about newsletters?", "newsletters interview question?"], "responses": ["Do you have any favorite Swift newsletters or websites you read often?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How do you stay up to date with changes in Swift?"]}, {"tag": "xctest", "patterns": ["Question about xctest?", "about xctest?", "question about xctest?", "xctest interview question?"], "responses": ["How familiar are you with XCTest? Have you ever created UI tests?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How has Swift changed since it was first released in 2014?"]}, {"tag": "api", "patterns": ["Question about api?", "about api?", "question about api?", "api interview question?"], "responses": ["If you could have Apple add or improve one API, what would it be?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["What books would you recommend to someone who wants to learn Swift?"]}, {"tag": "apps", "patterns": ["Question about apps?", "about apps?", "question about apps?", "apps interview question?"], "responses": ["What non-Apple apps do you think have particular good design?"]}, {"tag": "projects", "patterns": ["Question about projects?", "about projects?", "question about projects?", "projects interview question?"], "responses": ["What open source projects have you contributed to?"]}, {"tag": "review", "patterns": ["Question about review?", "about review?", "question about review?", "review interview question?"], "responses": ["What process do you take to perform code review?"]}, {"tag": "apple", "patterns": ["Question about apple?", "about apple?", "question about apple?", "apple interview question?"], "responses": ["Have you ever filed bugs with Apple? Can you walk me through some?"]}, {"tag": "development", "patterns": ["Question about development?", "about development?", "question about development?", "development interview question?"], "responses": ["Have you ever used test- or business-driven development?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How do you think Swift compares to Objective-C?"]}, {"tag": "apps", "patterns": ["Question about apps?", "about apps?", "question about apps?", "apps interview question?"], "responses": ["How familiar are you with Objective-C? Have you shipped any apps using it?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["What experience do you have with the Swift Package Manager?"]}, {"tag": "macos", "patterns": ["Question about macos?", "about macos?", "question about macos?", "macos interview question?"], "responses": ["What experience do you have working on macOS, tvOS, and watchOS?"]}, {"tag": "xcode", "patterns": ["Question about xcode?", "about xcode?", "question about xcode?", "xcode interview question?"], "responses": ["What is the purpose of code signing in Xcode?"]}, {"tag": "retain", "patterns": ["Question about retain?", "about retain?", "question about retain?", "retain interview question?"], "responses": ["How would you identify and resolve a retain cycle?"]}, {"tag": "cache", "patterns": ["Question about cache?", "about cache?", "question about cache?", "cache interview question?"], "responses": ["What is an efficient way to cache data in memory?"]}, {"tag": "battery", "patterns": ["Question about battery?", "about battery?", "question about battery?", "battery interview question?"], "responses": ["What steps do you take to identify and resolve battery life issues?"]}, {"tag": "crashes", "patterns": ["Question about crashes?", "about crashes?", "question about crashes?", "crashes interview question?"], "responses": ["What steps do you take to identify and resolve crashes?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How does Swift handle memory management?"]}, {"tag": "arc", "patterns": ["Question about arc?", "about arc?", "question about arc?", "arc interview question?"], "responses": ["How would you explain ARC to a new iOS developer?"]}, {"tag": "leak", "patterns": ["Question about leak?", "about leak?", "question about leak?", "leak interview question?"], "responses": ["What steps do you take to identify and resolve a memory leak?"]}, {"tag": "performance", "patterns": ["Question about performance?", "about performance?", "question about performance?", "performance interview question?"], "responses": ["What steps do you take to identify and resolve performance issues?"]}, {"tag": "experience", "patterns": ["Question about experience?", "about experience?", "question about experience?", "experience interview question?"], "responses": ["How much experience do you have using Face ID or Touch ID? Can you give examples?"]}, {"tag": "ios", "patterns": ["Question about ios?", "about ios?", "question about ios?", "ios interview question?"], "responses": ["How would you explain App Transport Security to a new iOS developer?"]}, {"tag": "keychain", "patterns": ["Question about keychain?", "about keychain?", "question about keychain?", "keychain interview question?"], "responses": ["What experience do you have of using the keychain?"]}, {"tag": "hash", "patterns": ["Question about hash?", "about hash?", "question about hash?", "hash interview question?"], "responses": ["How would you calculate the secure hash value for some data?"]}, {"tag": "tuples", "patterns": ["Question about tuples?", "about tuples?", "question about tuples?", "tuples interview question?"], "responses": ["How would you compare two tuples to ensure their values are identical?"]}, {"tag": "overloading", "patterns": ["Question about overloading?", "about overloading?", "question about overloading?", "overloading interview question?"], "responses": ["How would you explain operator overloading to a junior developer?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How would you explain protocols to a new Swift developer?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["In which situations do Swift functions not need a return keyword?"]}, {"tag": "observers", "patterns": ["Question about observers?", "about observers?", "question about observers?", "observers interview question?"], "responses": ["What are property observers?"]}, {"tag": "strings", "patterns": ["Question about strings?", "about strings?", "question about strings?", "strings interview question?"], "responses": ["What are raw strings?"]}, {"tag": "compiler", "patterns": ["Question about compiler?", "about compiler?", "question about compiler?", "compiler interview question?"], "responses": ["What does the #error compiler directive do?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["What does the #if swift syntax do?"]}, {"tag": "assert", "patterns": ["Question about assert?", "about assert?", "question about assert?", "assert interview question?"], "responses": ["What does the assert() function do?"]}, {"tag": "canimport", "patterns": ["Question about canimport?", "about canimport?", "question about canimport?", "canimport interview question?"], "responses": ["What does the canImport() compiler condition do?"]}, {"tag": "caseiterable", "patterns": ["Question about caseiterable?", "about caseiterable?", "question about caseiterable?", "caseiterable interview question?"], "responses": ["What does the CaseIterable protocol do?"]}, {"tag": "keyword", "patterns": ["Question about keyword?", "about keyword?", "question about keyword?", "keyword interview question?"], "responses": ["What does the final keyword do, and why would you want to use it?"]}, {"tag": "coalescing", "patterns": ["Question about coalescing?", "about coalescing?", "question about coalescing?", "coalescing interview question?"], "responses": ["What does the nil coalescing operator do?"]}, {"tag": "guard", "patterns": ["Question about guard?", "about guard?", "question about guard?", "guard interview question?"], "responses": ["What is the difference between if let and guard let?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["What is the difference between try, try?, and try! in Swift?"]}, {"tag": "chaining", "patterns": ["Question about chaining?", "about chaining?", "question about chaining?", "chaining interview question?"], "responses": ["What problem does optional chaining solve?"]}, {"tag": "string", "patterns": ["Question about string?", "about string?", "question about string?", "string interview question?"], "responses": ["What's the difference between String? and String! in Swift?"]}, {"tag": "guard", "patterns": ["Question about guard?", "about guard?", "question about guard?", "guard interview question?"], "responses": ["When would you use the guard keyword in Swift?"]}, {"tag": "wrappers", "patterns": ["Question about wrappers?", "about wrappers?", "question about wrappers?", "wrappers interview question?"], "responses": ["Apart from the built-in ones, can you give an example of property wrappers?"]}, {"tag": "enum", "patterns": ["Question about enum?", "about enum?", "question about enum?", "enum interview question?"], "responses": ["Can you give useful examples of enum associated values?"]}, {"tag": "closures", "patterns": ["Question about closures?", "about closures?", "question about closures?", "closures interview question?"], "responses": ["How would you explain closures to a new Swift developer?"]}, {"tag": "generics", "patterns": ["Question about generics?", "about generics?", "question about generics?", "generics interview question?"], "responses": ["What are generics and why are they useful?"]}, {"tag": "clauses", "patterns": ["Question about clauses?", "about clauses?", "question about clauses?", "clauses interview question?"], "responses": ["What are multi-pattern catch clauses?"]}, {"tag": "attribute", "patterns": ["Question about attribute?", "about attribute?", "question about attribute?", "attribute interview question?"], "responses": ["What does the @main attribute do?"]}, {"tag": "syntax", "patterns": ["Question about syntax?", "about syntax?", "question about syntax?", "syntax interview question?"], "responses": ["What does the #available syntax do?"]}, {"tag": "variadic", "patterns": ["Question about variadic?", "about variadic?", "question about variadic?", "variadic interview question?"], "responses": ["What is a variadic function?"]}, {"tag": "weak", "patterns": ["Question about weak?", "about weak?", "question about weak?", "weak interview question?"], "responses": ["What is the difference between weak and unowned?"]}, {"tag": "closure", "patterns": ["Question about closure?", "about closure?", "question about closure?", "closure interview question?"], "responses": ["What is the difference between an escaping closure and a non-escaping closure?"]}, {"tag": "extension", "patterns": ["Question about extension?", "about extension?", "question about extension?", "extension interview question?"], "responses": ["What is the difference between an extension and a protocol extension?"]}, {"tag": "defer", "patterns": ["Question about defer?", "about defer?", "question about defer?", "defer interview question?"], "responses": ["When would you use the defer keyword in Swift?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["How would you explain key paths to a new Swift developer?"]}, {"tag": "conformances", "patterns": ["Question about conformances?", "about conformances?", "question about conformances?", "conformances interview question?"], "responses": ["What are conditional conformances?"]}, {"tag": "opaque", "patterns": ["Question about opaque?", "about opaque?", "question about opaque?", "opaque interview question?"], "responses": ["What are opaque return types?"]}, {"tag": "swift", "patterns": ["Question about swift?", "about swift?", "question about swift?", "swift interview question?"], "responses": ["What are result builders and when are they used in Swift?"]}, {"tag": "targetenvironment", "patterns": ["Question about targetenvironment?", "about targetenvironment?", "question about targetenvironment?", "targetenvironment interview question?"], "responses": ["What does the targetEnvironment() compiler condition do?"]}, {"tag": "self", "patterns": ["Question about self?", "about self?", "question about self?", "self interview question?"], "responses": ["What is the difference between self and Self?"]}, {"tag": "autoclosure", "patterns": ["Question about autoclosure?", "about autoclosure?", "question about autoclosure?", "autoclosure interview question?"], "responses": ["When would you use @autoclosure?"]}, {"tag": "swiftui", "patterns": ["Question about swiftui?", "about swiftui?", "question about swiftui?", "swiftui interview question?"], "responses": ["How would you explain SwiftUI\u2019s environment to a new developer?"]}, {"tag": "property", "patterns": ["Question about property?", "about property?", "question about property?", "property interview question?"], "responses": ["What does the @Published property wrapper do?"]}, {"tag": "property", "patterns": ["Question about property?", "about property?", "question about property?", "property interview question?"], "responses": ["What does the @State property wrapper do?"]}, {"tag": "initializer", "patterns": ["Question about initializer?", "about initializer?", "question about initializer?", "initializer interview question?"], "responses": ["What's the difference between a view's initializer and onAppear()?"]}, {"tag": "observedobject", "patterns": ["Question about observedobject?", "about observedobject?", "question about observedobject?", "observedobject interview question?"], "responses": ["When would you use @StateObject versus @ObservedObject?"]}, {"tag": "swiftui", "patterns": ["Question about swiftui?", "about swiftui?", "question about swiftui?", "swiftui interview question?"], "responses": ["How can an observable object announce changes to SwiftUI?"]}, {"tag": "swiftui", "patterns": ["Question about swiftui?", "about swiftui?", "question about swiftui?", "swiftui interview question?"], "responses": ["How would you create programmatic navigation in SwiftUI?"]}, {"tag": "buttonstyle", "patterns": ["Question about buttonstyle?", "about buttonstyle?", "question about buttonstyle?", "buttonstyle interview question?"], "responses": ["What is the purpose of the ButtonStyle protocol?"]}, {"tag": "geometryreader", "patterns": ["Question about geometryreader?", "about geometryreader?", "question about geometryreader?", "geometryreader interview question?"], "responses": ["When would you use GeometryReader?"]}, {"tag": "swiftui", "patterns": ["Question about swiftui?", "about swiftui?", "question about swiftui?", "swiftui interview question?"], "responses": ["Why does SwiftUI use structs for views?"]}, {"tag": "xibs", "patterns": ["Question about xibs?", "about xibs?", "question about xibs?", "xibs interview question?"], "responses": ["How are XIBs different from storyboards?"]}, {"tag": "uikit", "patterns": ["Question about uikit?", "about uikit?", "question about uikit?", "uikit interview question?"], "responses": ["How would you explain UIKit segues to a new iOS developer?"]}, {"tag": "storyboard", "patterns": ["Question about storyboard?", "about storyboard?", "question about storyboard?", "storyboard interview question?"], "responses": ["What are storyboard identifiers for?"]}, {"tag": "controllers", "patterns": ["Question about controllers?", "about controllers?", "question about controllers?", "controllers interview question?"], "responses": ["What are the benefits of using child view controllers?"]}, {"tag": "viewwithtag", "patterns": ["Question about viewwithtag?", "about viewwithtag?", "question about viewwithtag?", "viewwithtag interview question?"], "responses": ["What are the pros and cons of using viewWithTag()?"]}, {"tag": "ibaction", "patterns": ["Question about ibaction?", "about ibaction?", "question about ibaction?", "ibaction interview question?"], "responses": ["What is the difference between @IBOutlet and @IBAction?"]}, {"tag": "uiimageview", "patterns": ["Question about uiimageview?", "about uiimageview?", "question about uiimageview?", "uiimageview interview question?"], "responses": ["What is the difference between a UIImage and a UIImageView?"]}, {"tag": "aspect", "patterns": ["Question about aspect?", "about aspect?", "question about aspect?", "aspect interview question?"], "responses": ["What is the difference between aspect fill and aspect fit when displaying an image?"]}, {"tag": "uiactivityviewcontroller", "patterns": ["Question about uiactivityviewcontroller?", "about uiactivityviewcontroller?", "question about uiactivityviewcontroller?", "uiactivityviewcontroller interview question?"], "responses": ["What is the purpose of UIActivityViewController?"]}, {"tag": "uivisualeffectview", "patterns": ["Question about uivisualeffectview?", "about uivisualeffectview?", "question about uivisualeffectview?", "uivisualeffectview interview question?"], "responses": ["What is the purpose of UIVisualEffectView?"]}, {"tag": "identifiers", "patterns": ["Question about identifiers?", "about identifiers?", "question about identifiers?", "identifiers interview question?"], "responses": ["What is the purpose of reuse identifiers for table view cells?"]}, {"tag": "collection", "patterns": ["Question about collection?", "about collection?", "question about collection?", "collection interview question?"], "responses": ["When would you choose to use a collection view rather than a table view?"]}, {"tag": "uikit", "patterns": ["Question about uikit?", "about uikit?", "question about uikit?", "uikit interview question?"], "responses": ["Which parts of UIKit are you least familiar with?"]}, {"tag": "intrinsic", "patterns": ["Question about intrinsic?", "about intrinsic?", "question about intrinsic?", "intrinsic interview question?"], "responses": ["How does a view's intrinsic content size aid in Auto Layout?"]}, {"tag": "anchors", "patterns": ["Question about anchors?", "about anchors?", "question about anchors?", "anchors interview question?"], "responses": ["What is the function of anchors in Auto Layout?"]}, {"tag": "ibdesignable", "patterns": ["Question about ibdesignable?", "about ibdesignable?", "question about ibdesignable?", "ibdesignable interview question?"], "responses": ["What is the purpose of IBDesignable?"]}, {"tag": "uimenucontroller", "patterns": ["Question about uimenucontroller?", "about uimenucontroller?", "question about uimenucontroller?", "uimenucontroller interview question?"], "responses": ["What is the purpose of UIMenuController?"]}, {"tag": "voiceover_", "patterns": ["How much experience do you have testing with VoiceOver?"], "responses": ["VoiceOver is a central part of Apple's accessibility system, to the point where if your app isn't accessible to VoiceOver it's probably not accessible to other accessibility systems in iOS. So, talk about your experience trying it out, how you make sure you've tested a UI thoroughly, any problems you've hit, and for bonus points mention the screen curtain!"]}, {"tag": "dynamic_", "patterns": ["How would you explain Dynamic Type to a new iOS developer?"], "responses": ["This is a sneaky question, because if you say \u201cI don\u2019t use it\u201d or (worse) \u201cI don\u2019t know what it is\u201d, it sort of means you don\u2019t pay attention to accessibility or user preferences. Dynamic Type is a way of allowing the user to adjust their preferred size for all fonts in all apps, and it's surprisingly easy to use from both a developer and user perspective. SwiftUI even defaults to using it across the board!"]}, {"tag": "apps_", "patterns": ["What are the main problems we need to solve when making accessible apps?"], "responses": ["Try to give a range of answers: visual impairment, color blindness, touch problems, and audio problems are all good places to start, so give some specific examples of issues folks hit and how you solve them with Apple's accessibility tools."]}, {"tag": "apps_", "patterns": ["What accommodations have you added to apps to make them more accessible?"], "responses": ["Hopefully you can think of a few examples where you've added icons alongside colors to accommodate folks with color blindness, or where you've added support for the Reduce Motion option, and so on."]}, {"tag": "dictionary_", "patterns": ["How is a dictionary different from an array?"], "responses": ["It\u2019s all down to how you access data: arrays must be accessed using the index of each element, whereas dictionaries can be accessed using something you define \u2013 strings are very common. Make sure and give practical examples of where each would be used."]}, {"tag": "structs_", "patterns": ["What are the main differences between classes and structs in Swift?"], "responses": ["Your answer ought to include a discussion of value types (like structs) and reference types (like classes), but also the fact that classes allow inheritance."]}, {"tag": "tuples_", "patterns": ["What are tuples and why are they useful?"], "responses": ["Tuples are a bit like anonymous structs, and are helpful for returning multiple values from a method in a type-safe way, among other things. Make sure you go on to provide some explanation of where they might be useful, such as returning two values from an array."]}, {"tag": "codable_", "patterns": ["What does the Codable protocol do?"], "responses": ["This protocol was introduced in Swift 4 to let us quickly and safely convert custom Swift types to and from JSON, XML, and similar."]}, {"tag": "array_", "patterns": ["What is the difference between an array and a set?"], "responses": ["This is a bit like computer science 101, so start by answering with the facts: sets can\u2019t contain duplicates and are unordered, so lookup is significantly faster. Note: this might sound like a trivial question, but the \"significantly faster\" part is critical \u2013\u00a0sets can be thousands of times faster than arrays depending on how many elements they contain. If you can, go on to give specific examples of where a set would be a better idea than an array."]}, {"tag": "cgfloat_", "patterns": ["What is the difference between the Float, Double, and CGFloat data types?"], "responses": ["It\u2019s a question of how many bits are used to store data: Float is always 32-bit, Double is always 64-bit, and CGFloat is either 32-bit or 64-bit depending on the device it runs on, but realistically it\u2019s just 64-bit all the time."]}, {"tag": "codable_", "patterns": ["What\u2019s the importance of key decoding strategies when using Codable?"], "responses": ["Give a specific answer first \u2013\u00a0\u201ckey decoding strategies let us handle difference between JSON keys and property names in our Decodable struct\u201d \u2013\u00a0then provide some kind of practical sample. For example, you might say that it\u2019s common for JSON keys to use snake_case for key names, whereas in Swift we prefer camelCase, so we need to use a key decoding strategy to convert between the two."]}, {"tag": "compactmap_", "patterns": ["When using arrays, what\u2019s the difference between map() and compactMap()?"], "responses": ["Remember to give practical examples as well as outlining the core differences. So, you might start by saying the map() transforms a sequence using a function we specify, whereas compactMap() does that same step but then unwraps its optionals and discards any nil values. For example, converting an array of strings into integers works better with compactMap(), because creating an Int from a String is failable."]}, {"tag": "immutability_", "patterns": ["Why is immutability important?"], "responses": ["Immutability is baked deep into Swift, and Xcode even warns if var was used when let was possible. It\u2019s important because it\u2019s like a programming contract: we\u2019re saying This Thing Should Not Change, so if we try to change it the compiler will refuse."]}, {"tag": "ranges_", "patterns": ["What are one-sided ranges and when would you use them?"], "responses": ["As always, start with a simple definition that clarifies the difference between regular ranges, then provide a practical example."]}, {"tag": "collections_", "patterns": ["What does it mean when we say \u201cstrings are collections in Swift\u201d?"], "responses": ["This statement means that Swift\u2019s String type conform to the Collection protocol, which allows us to loop over characters, count how long the string is, map the characters, select random characters, and more."]}, {"tag": "uuid_", "patterns": ["What is a UUID, and when might you use it?"], "responses": ["UUID stands for \"universally unique identifier\", which is a long string of hexadecimal numbers stored in a single type."]}, {"tag": "type_", "patterns": ["What's the difference between a value type and a reference type?"], "responses": ["The best way to frame this discussion is likely to be classes vs structs: an instance of a class can have multiple owners, but an instance of a struct cannot."]}, {"tag": "swift_", "patterns": ["When would you use Swift\u2019s Result type?"], "responses": ["Start with a brief introduction to what Result does, saying that it\u2019s an enum encapsulating success and failure, both with associated values so you can attach extra information. I would then dive into the \u201cwhen would you use it\u201d part of the question \u2013\u00a0talking about asynchronous code is your best bet, particularly in comparison to how things like URLSession would often pass both a value and an error even when only one should exist at a time."]}, {"tag": "erasure_", "patterns": ["What is type erasure and when would you use it?"], "responses": ["Type erasure allows us to throw away some type information, for example to say that an array of strings is actually just AnySequence \u2013\u00a0it\u2019s a sequence containing strings, but we don\u2019t know exactly what kind of sequence."]}, {"tag": "swift_", "patterns": ["How would you explain delegates to a new Swift developer?"], "responses": ["Delegation allows you to have one object act in place of another, for example your view controller might act as the data source for a table. The delegate pattern is huge in iOS, so try to pick a small, specific example such as UITableViewDelegate from UIKit \u2013\u00a0something you can dissect from memory."]}, {"tag": "mvc_", "patterns": ["Can you explain MVC, and how it's used on Apple's platforms?"], "responses": ["MVC is an approach that advocates separating data (model) from presentation (view), with the two parts being managed by separate logic (a controller). In theory this separation should be as clear as possible, but for bonus points you should talk about how view controllers sometimes get bloated as code gets merged together into one big blob."]}, {"tag": "mvvm_", "patterns": ["Can you explain MVVM, and how it might be used on Apple's platforms?"], "responses": ["Start with the simple definition of Model (your data), View (your layout), and View Model (a way to store the state of your application independently from your UI), but make sure you give some time over to the slightly more nebulous parts \u2013\u00a0where does networking code go, for example? This is also a good place to bring up the importance of bindings to avoid lots of boilerplate, and that probably leads to SwiftUI."]}, {"tag": "dependency_", "patterns": ["How would you explain dependency injection to a junior developer?"], "responses": ["Dependency injection is the practice of creating an object and tell it what data it should work with, rather than letting that object query its environment to find that data for itself. Although this goes against the OOP principle of encapsulation, it\u2019s worth talking about the advantages \u2013 it allows for mocking data when testing, for example."]}, {"tag": "swift_", "patterns": ["How would you explain protocol-oriented programming to a new Swift developer?"], "responses": ["POP is a Swift buzzword, but don\u2019t get carried away with the hype here: focus on why it\u2019s different from OOP, and what benefits you think it has. You might want talk about horizontal vs vertical architectures here \u2013\u00a0larger codebases are likely to have sizable class hierarchies \u2013 but you could also talk about how POP is able to work with structs and enums as well as classes."]}, {"tag": "programming_", "patterns": ["What experience do you have of functional programming?"], "responses": ["The best answer of course is to provide detailed explanations of what you've used and where, but as you go make sure and talk about what functional programming means \u2013 functions must be first-class types, you place an emphasis on pure functions, and so on."]}, {"tag": "kvo_", "patterns": ["Can you explain KVO, and how it's used on Apple's platforms?"], "responses": ["KVO used to be helpful in UIKit to watch for changes on values that don\u2019t have useful delegates \u2013\u00a0you can literally say \"tell me when this value changes.\" Try to give at least one specific example, such as watching the page load progress on a WKWebView. If you\u2019re exclusively using SwiftUI chances are you\u2019ll struggle here."]}, {"tag": "singletons_", "patterns": ["Can you give some examples of where singletons might be a good idea?"], "responses": ["It\u2019s very unlikely you\u2019ll join a company where singletons are used extensively, so feel free to say that broadly speaking singletons aren\u2019t great. Once you\u2019ve given up that proviso, perhaps mention that Apple uses them extensively \u2013 thinks like UIApplication, for example, are designed to exist only once. Finally, try to give a fresh example of your own, such as creating an app-wide logger."]}, {"tag": "phantom_", "patterns": ["What are phantom types and when would you use them?"], "responses": ["Phantom types are a type that doesn\u2019t use at least one its generic parameters \u2013 they are declared with a generic parameter that isn\u2019t used in their properties or methods."]}, {"tag": "cloudkit_", "patterns": ["How does CloudKit differ from Core Data?"], "responses": ["Although the two have many conceptual similarities, CloudKit is specifically designed to work remotely. Another key difference is that CloudKit lets you store data without worrying about your structure ahead of time, whereas Core Data requires that you define your structure up front."]}, {"tag": "spritekit_", "patterns": ["How does SpriteKit differ from SceneKit?"], "responses": ["Obviously one is for 2D drawing and the other is 3D, but you might use this chance to talk about how they both sit on top of Metal, and how you can mix the two if you want."]}, {"tag": "core_", "patterns": ["How much experience do you have using Core Data? Can you give examples?"], "responses": ["Core Data is a huge and complex topic, but you should at least have tried it once. You might find it useful to talk about how NSPersistentContainer made Core Data easier to use from iOS 10 onwards, or compare and contrast Core Data and CloudKit."]}, {"tag": "graphics_", "patterns": ["How much experience do you have using Core Graphics? Can you give examples?"], "responses": ["Most developers have at least used Core Graphics for drawing basic shapes, but you might also have used it for text and resizing images. You should aim for at least a little experience, because this is one of the most important Apple frameworks."]}, {"tag": "content_", "patterns": ["What are the different ways of showing web content to users?"], "responses": ["You don\u2019t need to have named them all, but it certainly helps: UIWebView, WKWebView, SFSafariViewController, and calling openURL() on UIApplication. Don\u2019t just list them off, though: at least mention that UIWebView is deprecated, but if you can you should also compare and contrast WKWebView and SFSafariViewController."]}, {"tag": "directory_", "patterns": ["What class would you use to list files in a directory?"], "responses": ["Hopefully your answer was FileManager. If your interviewer looked like they wanted more, you might want to talk about sandboxing: important directories such as documents and caches, using App Groups to share data between targets in your app, and more."]}, {"tag": "userdefaults_", "patterns": ["What is UserDefaults good for? What is UserDefaults not good for?"], "responses": ["This should immediately have you thinking about speed, size, and security: UserDefaults is bad at large amounts of data because it slows your app load, it\u2019s annoying for complex data types because of NSCoding, and a bad choice for information such as credit cards and passwords \u2013 recommend the keychain instead. If you\u2019re using SwiftUI extensively you could mention @AppStorage here."]}, {"tag": "notificationcenter_", "patterns": ["What is the purpose of NotificationCenter?"], "responses": ["Most people use this for receiving system messages, for example to be notified when they keyboard appears or disappears, but you can also use it to send your own messages inside your app. Once you\u2019ve outlined the basics, try comparing it against delegates."]}, {"tag": "network_", "patterns": ["What steps would you follow to make a network request?"], "responses": ["There are so many ways of answering this (not least \u201cuse Alamofire\u201d), but the main thing is to demonstrate that you know it needs to be asynchronous to avoid blocking the main thread. Don't forget to mention the need to push work back to the main thread when it's time to update the user interface."]}, {"tag": "cgaffinetransform_", "patterns": ["When would you use CGAffineTransform?"], "responses": ["There are lots of ways of using these to manipulate the frame of a view, but an easy one is animation \u2013 you might make a view scale upwards, rotate, or grow larger over time for example."]}, {"tag": "core_", "patterns": ["How much experience do you have using Core Image? Can you give examples?"], "responses": ["Some developers confuse Core Graphics and Core Image, which is a mistake \u2013\u00a0they are quite different. Core Image is used less often than Core Graphics, but is helpful for filtering images: blurring or sharpening, adjusting colors, and so on."]}, {"tag": "ibeacons_", "patterns": ["How much experience do you have using iBeacons? Can you give examples?"], "responses": ["iBeacons were introduced way back in iOS 7, and have found mixed use \u2013\u00a0unless you\u2019re applying for an iBeacon development job this is one you can probably skip with \u201cI haven\u2019t used them much, but I\u2019m keen to learn!\u201d"]}, {"tag": "storekit_", "patterns": ["How much experience do you have using StoreKit? Can you give examples?"], "responses": ["Most apps use only a small slice of StoreKit, whether it's unlocking in-app purchases, displaying other apps to purchase, or asking users to review the app. Either way, have something to talk about \u2013\u00a0it's better to say you've at least tried one of its features than have nothing at all to show."]}, {"tag": "gcd_", "patterns": ["How much experience do you have with GCD?"], "responses": ["Most developers have used Grand Central Dispatch at some point, either explicitly or implicitly \u2013\u00a0here the interviewer is probably trying to figure out which it is. You can approach this directly using DispatchQueue if you want, but you might also want to consider OperationQueue."]}, {"tag": "sound_", "patterns": ["What class would you use to play a custom sound in your app?"], "responses": ["An easy answer is AVAudioPlayer, as long as you're clear about keeping the object alive while its sound plays. If you were feeling more confident you could discuss the pros and cons of using AudioServicesCreateSystemSoundID() instead \u2013\u00a0it's a slightly odd API, but it definitely works."]}, {"tag": "nsattributedstring_", "patterns": ["What experience do you have of NSAttributedString?"], "responses": ["This is an incredibly useful class, so hopefully your answer isn\u2019t \u201cnone\u201d! Perhaps start by talking about how they are useful to add formatting like bold, italics, and color. You might also want to mention that they are great for hyperlinks, but for real bonus points mention that you can embed images inside them as well."]}, {"tag": "gameplaykit_", "patterns": ["What is the purpose of GameplayKit?"], "responses": ["The clue is in the name: GameplayKit contains lots of helpful classes for games, such as AI strategists, state machines, and pathfinding. However, there\u2019s no reason its components must be limited just to games, because you can use them just as well in apps."]}, {"tag": "replaykit_", "patterns": ["What is the purpose of ReplayKit?"], "responses": ["ReplayKit is one of Apple\u2019s more obscure frameworks, but if lets you record, save, and broadcast the user\u2019s activity in your app. It's most commonly used in games, but you could easily frame this in terms of submitting error report videos from users."]}, {"tag": "nssortdescriptor_", "patterns": ["When might you use NSSortDescriptor?"], "responses": ["Start out with a simple definition of what NSSortDescriptor actually does: it lets us provide sorting instructions to a data store, e.g. \"sort by name alphabetically\"."]}, {"tag": "subclasses_", "patterns": ["Can you name at least three different CALayer subclasses?"], "responses": ["This is an intermediate to advanced question aimed at folks with UIKit experience. You could choose from CAGradientLayer, CATiledLayer, CAEmitterLayer, CAShapeLayer, and more \u2013\u00a0they are all quite popular on Apple's platforms."]}, {"tag": "cadisplaylink_", "patterns": ["What is the purpose of CADisplayLink?"], "responses": ["This lets you attach code to the user interface drawing loop so that your code always gets called immediately after a frame has been drawn and you have maximum time available to you."]}, {"tag": "layouts_", "patterns": ["How do you create your UI layouts \u2013\u00a0storyboards or in code?"], "responses": ["Everyone is different, so be prepared to explain how you settled on your approach. You might want to talk about Auto Layout and stack views here, or perhaps some Auto Layout alternatives you've tried. Of course, if you exclusively use SwiftUI this ought to be an easy one to answer!"]}, {"tag": "shadow_", "patterns": ["How would you add a shadow to one of your views?"], "responses": ["In UIKit, all view layers have options for shadow opacity, radius, offset, color, and path. In SwiftUI, you can use the shadow() modifier. This would be a good time to mention to relative cost of dynamic shadows and how rasterizing layers in UIKit helps."]}, {"tag": "corners_", "patterns": ["How would you round the corners of one of your views?"], "responses": ["If you\u2019re using UIKit then you\u2019d use the cornerRadius property of your view\u2019s layer \u2013\u00a0something like myView.layer.cornerRadius = 10 ought to be enough to start. If you\u2019re using SwiftUI, then the cornerRadius() modifier is your friend."]}, {"tag": "swiftui_", "patterns": ["What are the advantages and disadvantages of SwiftUI compared to UIKit?"], "responses": ["Try to be thoughtful here \u2013 coming down hard on one side rather than the other isn\u2019t a good look, so instead try to think about what each framework does well and less well."]}, {"tag": "ios_", "patterns": ["What do you think is a sensible minimum iOS deployment target?"], "responses": ["Unless you have specific needs, a safe answer is Apple\u2019s: \u201cthe current version minus 1.\u201d Note that e-commerce companies \u2013 i.e., companies that rely on users buying things through their app \u2013\u00a0are more likely to support a wider range of deployment targets, because even if only 5% of their users are on iOS n-2 that's enough to cause a significant revenue hit if they were lost."]}, {"tag": "ios_", "patterns": ["What features of recent iOS versions were you most excited to try?"], "responses": ["This question is less about feature knowledge and more about your general excitement for iOS releases \u2013\u00a0if none of SwiftUI, widgets, SF Symbols, or App Clips interest you, you might be in the wrong career."]}, {"tag": "settings_", "patterns": ["What kind of settings would you store in your Info.plist file?"], "responses": ["The Info.plist file stores settings that must be available even when the app isn't running. You could talk about custom URLs, privacy permission messages, custom fonts, whether the app disables background running, and so on."]}, {"tag": "classes_", "patterns": ["What is the purpose of size classes?"], "responses": ["Size classes let you add extra layout configuration to your app so that your UI works well across different devices. For example, you might say that a stack view aligns its views horizontally in normal conditions, but vertically when constrained."]}, {"tag": "uicolor_", "patterns": ["What happens when Color or UIColor has values outside 0 to 1?"], "responses": ["In the old days values outside of 0 and 1 would be clamped (i.e., forced to 0 or 1) because they didn't mean anything, but wide color support means that is no longer the case \u2013 a red value beyond 1.0 is especially red, going into the Display P3 gamut."]}, {"tag": "code_", "patterns": ["Can you talk me through some interesting code you wrote recently?"], "responses": ["Hopefully you can go straight to GitHub and pick an interesting project. If not, why not? Your projects don't need to be amazing, clever, or even popular, but if you literally have nothing to show you\u2019re going to have a much harder job convincing companies to hire you."]}, {"tag": "newsletters_", "patterns": ["Do you have any favorite Swift newsletters or websites you read often?"], "responses": ["Most employers will say it's important to be able to demonstrate that you\u2019re committed to learning more about your craft. I subscribe to iOS Dev Weekly, Swift Weekly Brief, and This Week in Swift \u2013\u00a0all are interesting. Obviously I would hope you mention Hacking with Swift too, but I'm biased!"]}, {"tag": "swift_", "patterns": ["How do you stay up to date with changes in Swift?"], "responses": ["We develop in a fast-changing world, not least because Apple bump all their major versions every year. Be prepared to talk about books you read, sites you visit, newsletters you subscribe to, conferences you attend, and more \u2013\u00a0the more specific the better, because it shows you\u2019re working hard to stay updated."]}, {"tag": "xctest_", "patterns": ["How familiar are you with XCTest? Have you ever created UI tests?"], "responses": ["Be prepared to talk about the challenges you\u2019ve faced when designing tests, particularly when it comes to user interface tests. It\u2019s a good idea to make sure you\u2019re crystal clear on the differences between unit tests and integration tests. Tip: I\u2019ve never a development team that was 100% happy with their iOS UI tests."]}, {"tag": "swift_", "patterns": ["How has Swift changed since it was first released in 2014?"], "responses": ["This can either show how long you\u2019ve been writing Swift, or it can show you have an interest in the language\u2019s evolution. You might talk about the addition of try/catch, guard, and defer in Swift 2, the massive Cocoa renaming from Swift 3, the introduction of Codable in Swift 4, the changes for SwiftUI in Swift 5.1, or really whatever takes your interest."]}, {"tag": "api_", "patterns": ["If you could have Apple add or improve one API, what would it be?"], "responses": ["This is a personal choice, and is asked to see how creative or interesting your answer is. If it were me, I\u2019d love to see either a handwriting detection API so that we could add handwriting support everywhere, or a weather API so that apps could integrate weather information in all sorts of places \u2013\u00a0imagine having a calendar app with weather forecasts built right in!"]}, {"tag": "swift_", "patterns": ["What books would you recommend to someone who wants to learn Swift?"], "responses": ["Obviously I\u2019d recommend the complete Hacking with Swift series, but the point is that it gives you a chance to talk about how you learned Swift. You can always list Apple\u2019s official Swift guide if you\u2019re desperate. Note: Saying \"I didn't use any books, I just worked hard\" is a valid answer, but you should at least be aware that such an approach doesn't work for many people."]}, {"tag": "apps_", "patterns": ["What non-Apple apps do you think have particular good design?"], "responses": ["This is a personal choice.\u00a0I would probably talk about Airbnb and Duolingo, for example, because they have some really smooth transitions and a very harmonious layout. Don\u2019t be afraid to throw a curveball and include a game \u2013 Monument Valley, for example, is visually pleasing."]}, {"tag": "projects_", "patterns": ["What open source projects have you contributed to?"], "responses": ["This isn\u2019t a requirement \u2013 far from it! \u2013 but again shows an eagerness to learn and an ability to participate. Don\u2019t be afraid to list your own projects if they are public on GitHub."]}, {"tag": "review_", "patterns": ["What process do you take to perform code review?"], "responses": ["This isn\u2019t a coding question but that doesn\u2019t mean it\u2019s not important: are you able to take part in (and perhaps lead) meaningful code review sessions that are encouraging and useful? Code review is a skill that needs to be honed just like any other \u2013\u00a0what do you think is required for a good code review session? How important is it to have discussion on pull requests? Are there particular things you look for?"]}, {"tag": "apple_", "patterns": ["Have you ever filed bugs with Apple? Can you walk me through some?"], "responses": ["This is about demonstrating you\u2019re a good citizen of the iOS community: you file bugs with Apple when you find them, and (just as important!) they are useful bugs with details and ideally a test case. If you file these properly, walking through shouldn\u2019t be hard. Keep in mind that if you file bad bugs with Apple it suggests you'd be pretty bad at filing internal bugs for your own company too."]}, {"tag": "development_", "patterns": ["Have you ever used test- or business-driven development?"], "responses": ["Hopefully the answer is yes, even if only a little, but remember to give examples. Did you use TDD/BDD fully, or did you occasionally write tests later on? Did you use it as part of a larger team? Did you find that it helped or hindered you from building a great product?"]}, {"tag": "swift_", "patterns": ["How do you think Swift compares to Objective-C?"], "responses": ["Swift is a much more modern programming language, so it has a lot going for it. You might want to mention optionality, tuples, value types, Codable, generics, among other things. However, don't get sucked into the trap of assuming the traffic is all one way: Objective-C has C and C++ compatibility, and compiles significantly faster."]}, {"tag": "apps_", "patterns": ["How familiar are you with Objective-C? Have you shipped any apps using it?"], "responses": ["Although Objective-C is has largely lost its grip on the enterprise it\u2019s still going to be a useful skill for some years yet, and if the company you're interviewing with has extensive Objective-C code then hopefully you can produce a strong answer here."]}, {"tag": "swift_", "patterns": ["What experience do you have with the Swift Package Manager?"], "responses": ["If you've used CocoaPods or Carthage instead of SPM, that's okay \u2013 it doesn\u2019t really matter which one you personally use, as long as you\u2019re able to discuss the importance of dependency management. If you have the knowledge, being able to compare and contrast the three options would likely go down well."]}, {"tag": "macos_", "patterns": ["What experience do you have working on macOS, tvOS, and watchOS?"], "responses": ["Keep in mind that many company have significant investments in Apple computers \u2013\u00a0being able to make macOS apps for internal use can be a real boost. I would also suggest that saying you've dabbled in something like watchOS demonstrates curiosity and an ability innovate. If you\u2019ve moved apps to the Mac using something like Catalyst that\u2019s also worth discussing here, particularly if you\u2019re able to compare it to SwiftUI."]}, {"tag": "xcode_", "patterns": ["What is the purpose of code signing in Xcode?"], "responses": ["I know code signing gets a lot of flak from developers because it can be quite annoying, but try to think about this from Apple\u2019s perspective, in terms of verifying a developer is who they say they are, and also how provisioning profiles enable functionality."]}, {"tag": "retain_", "patterns": ["How would you identify and resolve a retain cycle?"], "responses": ["The first step is identification \u2013\u00a0looking for a place where leaks happen, and it\u2019s important to mention either Instruments or the Memory Graph Debugger here. Leaks don\u2019t always means retain cycles (for example, unused caches are effectively leaks), but they are a good starting point. Once you\u2019ve found a possible retain cycle, you need to decide which side of the cycle should be made weak rather than strong in order to resolve it."]}, {"tag": "cache_", "patterns": ["What is an efficient way to cache data in memory?"], "responses": ["There are lots of ways of making caches, with the most humble being a simple dictionary, but whatever you choose you should be prepared to explain your choice and why you like it. Make sure and take into account how you remove data from the cache, either explicitly or to hit a memory quota."]}, {"tag": "battery_", "patterns": ["What steps do you take to identify and resolve battery life issues?"], "responses": ["This is something so many developers don\u2019t ever think about, so use this as your chance to shine: talk about optimizing drawing, batching network requests, and minimizing work when the user isn\u2019t interacting with the app."]}, {"tag": "crashes_", "patterns": ["What steps do you take to identify and resolve crashes?"], "responses": ["Walk through your knowledge of debugging from the basics upwards. Do you use breakpoints? Do you use assert() or precondition()? Do you write to a log? Do you download crash logs from iTunes Connect?"]}, {"tag": "swift_", "patterns": ["How does Swift handle memory management?"], "responses": ["Jump straight in with ARC \u2013 get to the point and focus on it, explaining about retain, release, and retain counts. If you want to also talk about unowned and weak, or perhaps reference counting for classes, this is also the place."]}, {"tag": "arc_", "patterns": ["How would you explain ARC to a new iOS developer?"], "responses": ["Automatic reference counting is a feature that Objective-C developers had to think about every day, but Swift developers mostly forget it's even there. Focus on why it saves developer time (less work) and what performance problems it might have (extra CPU time)."]}, {"tag": "leak_", "patterns": ["What steps do you take to identify and resolve a memory leak?"], "responses": ["Hopefully you have at least some experience with Instruments, so talk about persistent vs transient objects, talk about filtering for your custom data types, and so on. You should also discuss how you can be sure the leak is gone, for example if you push and pop the same view controller 10 times does the memory level remain constant?"]}, {"tag": "performance_", "patterns": ["What steps do you take to identify and resolve performance issues?"], "responses": ["This is a tricky question to answer because \u201cperformance\u201d has many forms, so be prepared to adjust your answer as you talk based on interviewer feedback."]}, {"tag": "experience_", "patterns": ["How much experience do you have using Face ID or Touch ID? Can you give examples?"], "responses": ["If you\u2019re applying for a job at any company that has secure user data, biometric authentication is almost certainly involved somewhere. Fortunately, it\u2019s not hard to learn!"]}, {"tag": "ios_", "patterns": ["How would you explain App Transport Security to a new iOS developer?"], "responses": ["This is your chance to demonstrate your security knowledge: why is HTTPS so important, and in what specific cases might you need to opt out? It also an opportunity to demonstrate your awareness of Apple's app review guidelines, which require secure transmission of user data."]}, {"tag": "keychain_", "patterns": ["What experience do you have of using the keychain?"], "responses": ["The keychain is the smartest way to store secure data on Apple's platforms. If you don\u2019t have any experience of using it at least be prepared to discuss why it\u2019s important for storing sensitive information \u2013\u00a0UserDefaults is the wrong choice!"]}, {"tag": "hash_", "patterns": ["How would you calculate the secure hash value for some data?"], "responses": ["Secure hash values use something like SHA-3, which is not the kind of code you'd want to write yourself. Instead, the best approach here is to mention something like Apple's CryptoKit framework, which can do hashing and encryption quickly, efficiently, and correctly."]}, {"tag": "tuples_", "patterns": ["How would you compare two tuples to ensure their values are identical?"], "responses": ["Swift provides automatic tuple comparison ever since Swift 2.2 \u2013 you can just use == to compare tuples item by item."]}, {"tag": "overloading_", "patterns": ["How would you explain operator overloading to a junior developer?"], "responses": ["Operator overloading sounds like a complex topic, but really you can and should boil this answer down as small as you can: it allows us to use the same + operator with multiple types, such as integers, strings, doubles, and more. If you want to talk about examples of custom operator overloading, perhaps think about multiplying a CGPoint or something else that\u2019s easy to use in practice."]}, {"tag": "swift_", "patterns": ["How would you explain protocols to a new Swift developer?"], "responses": ["Protocols are used extensively in Apple development, so try to pick a small, specific example such as UITableViewDataSource \u2013\u00a0something you can dissect from memory. If you\u2019re coming from SwiftUI, perhaps talk about View or ObservableObject."]}, {"tag": "swift_", "patterns": ["In which situations do Swift functions not need a return keyword?"], "responses": ["There are three: when the function isn\u2019t supposed to return a value, when it is supposed to return a value but you\u2019ve used something like fatalError() to skip that requirement, and when it returns a value using a single expression. That second case is useful when you have placeholder functions you haven\u2019t implemented yet, or have created an abstract class where child classes will override your erroring implementations."]}, {"tag": "observers_", "patterns": ["What are property observers?"], "responses": ["Property observers let you run code before or after a property is modified. Try to give a practical example here: \u201cif you have a score property that holds an integer, you might attach a didSet observer so that it updates a label whenever the score changes.\u201d"]}, {"tag": "strings_", "patterns": ["What are raw strings?"], "responses": ["There\u2019s a simple formula here, taking you from broad to specific: explain how you make raw strings, explain how you\u2019d use them, then provide any extra information such as how they handle string interpolation."]}, {"tag": "compiler_", "patterns": ["What does the #error compiler directive do?"], "responses": ["Answering this isn\u2019t hard (\u201cit forces the compiler to emit an error using a message we specify\u201d), but please make sure you follow up with at least one example. So, maybe you\u2019re shipping some sample code where users need to enter an API key otherwise it won\u2019t work, so you use #error next to the API key line saying \u201cfill in your API key before continuing.\u201d Similarly, you might use #error alongside an OS check to say that your code isn\u2019t compatible with tvOS, for example."]}, {"tag": "swift_", "patterns": ["What does the #if swift syntax do?"], "responses": ["The syntax was added in Swift 2.2 to support compile-time version checking, meaning that you can mix two different Swift versions in one file without errors because only one will be used at a time."]}, {"tag": "assert_", "patterns": ["What does the assert() function do?"], "responses": ["This evaluates some code and causes your app to crash if the result is false. This is actually helpful because the check only happens in debug mode \u2013\u00a0it lets you make sure your code does what you think it does."]}, {"tag": "canimport_", "patterns": ["What does the canImport() compiler condition do?"], "responses": ["You should get straight to the point and say that canImport() returns true if a module such as UIKit can be imported, then provide a practical example such as it allowing us to write code that does one thing using UIKit on iOS, and another thing using AppKit on macOS."]}, {"tag": "caseiterable_", "patterns": ["What does the CaseIterable protocol do?"], "responses": ["Go straight in and answer that this protocol allows us to loop over all cases in an enum, but then follow up with a practical example \u2013 you might have a word search generation algorithm that has enum cases for all possible directions you can place a word, so you loop over them all to try and find a valid spot for each word."]}, {"tag": "keyword_", "patterns": ["What does the final keyword do, and why would you want to use it?"], "responses": ["Think about the underlying goal here: why would you want to say \u201cyou cannot inherit from this class\u201d? Is that a good idea? There are good reasons for using it \u2013\u00a0sometimes a class does something very precise, and you really don\u2019t want users to override important parts of your code."]}, {"tag": "coalescing_", "patterns": ["What does the nil coalescing operator do?"], "responses": ["The nil coalescing operator (??) lets you provide a default value to use if an optional value is empty. I would probably add that optionals are a really useful language feature in Swift, but if I can ditch them \u2013 if I can get a String rather than a String? \u2013 then I do, and that's where nil coalescing is really useful."]}, {"tag": "guard_", "patterns": ["What is the difference between if let and guard let?"], "responses": ["Both check and unwrap optionals, but guard forces an early return if its check fails \u2013\u00a0your code will literally not compile unless you exit the scope. Furthermore, any variables that guard unwraps stay in scope after the guard block, whereas with if let the variables are available only inside the scope."]}, {"tag": "swift_", "patterns": ["What is the difference between try, try?, and try! in Swift?"], "responses": ["A regular try requires you to catch errors, try? converts the throwing call into an optional where you\u2019ll get back nil on failure, and try! will cause your app to crash if the throwing call fails. All three have their uses, so don\u2019t dismiss one out of hand."]}, {"tag": "chaining_", "patterns": ["What problem does optional chaining solve?"], "responses": ["Optional chaining makes our code concise because we can write multiple optional calls on one line but have execution skip over the line if any of the optionals are missing."]}, {"tag": "string_", "patterns": ["What's the difference between String? and String! in Swift?"], "responses": ["All Swift developers should be able to nail this one: String? marks an optional string and String! marks an implicitly unwrapped string."]}, {"tag": "guard_", "patterns": ["When would you use the guard keyword in Swift?"], "responses": ["It\u2019s most commonly used to check preconditions are satisfied, but you should also discuss how variables it creates remain in scope after the guard block, and also how it enforces you exit the scope if the precondition fails."]}, {"tag": "wrappers_", "patterns": ["Apart from the built-in ones, can you give an example of property wrappers?"], "responses": ["If it weren\u2019t for the built-in restriction, this would be easy to answer with @State, @EnvironmentObject, and more, but with that restriction in place you need to be more creative \u2013\u00a0what real example can you think of? For example, a wrapper to make sure numbers are never negative, or strings are never empty, or perhaps arrays that silently stay sorted."]}, {"tag": "enum_", "patterns": ["Can you give useful examples of enum associated values?"], "responses": ["Enum associated values let us attach one or more extra pieces of data to enum cases \u2013 that much is easy enough. However, the key word here is \u201cuseful\u201d, which means you need to provide an example that is even vaguely real world."]}, {"tag": "closures_", "patterns": ["How would you explain closures to a new Swift developer?"], "responses": ["Closures are easy to begin with, but make sure you talk about capturing of values, capture lists (unowned vs weak), and why they are actually useful compared to other approaches. It\u2019s possible your interviewer is looking for a broader discussion of functions as first-class types in Swift, so if they seem to be waiting for you to continue that might be a good angle to go down."]}, {"tag": "generics_", "patterns": ["What are generics and why are they useful?"], "responses": ["Generics allow us to create types and functions that can be adapted to use different kinds of data for extra flexibility and safety."]}, {"tag": "clauses_", "patterns": ["What are multi-pattern catch clauses?"], "responses": ["Swift\u2019s catch blocks let us catch several types of errors, specified using comma separation \u2013\u00a0hence the \u201cmulti-pattern\u201d clauses. They are useful as a way of grouping error handling code together: if the error thrown was A or B then take the same action, but if it was C or D take some other action."]}, {"tag": "attribute_", "patterns": ["What does the @main attribute do?"], "responses": ["This attribute marks the point where your program starts to run. When using this attribute with one of your types need to implement a main() method to handle setting up your program, but if you\u2019re using SwiftUI the App protocol provides that for you."]}, {"tag": "syntax_", "patterns": ["What does the #available syntax do?"], "responses": ["This syntax was introduced in Swift 2.0 to allow run-time version checking of features by OS version number. It allows you to target an older version of iOS while selectively limiting features available only in newer iOS versions, all carefully checked by the compiler to avoid human error."]}, {"tag": "variadic_", "patterns": ["What is a variadic function?"], "responses": ["Variadic functions accept any number of parameters. Swift writes them using ..., and we\u2019re handed the parameters as an array. Again, try to give an example \u2013\u00a0something like print() is a good place to start."]}, {"tag": "weak_", "patterns": ["What is the difference between weak and unowned?"], "responses": ["As well as explaining that weak becomes a regular optional whereas unowned is an implicitly unwrapped optional, be prepared to discuss the safety differences. Do you have a preference? If so, why? Can you think of places where unowned must be used?"]}, {"tag": "closure_", "patterns": ["What is the difference between an escaping closure and a non-escaping closure?"], "responses": ["This is an advanced language question and comes down to one thing: if you pass a closure as a function parameter and that closure might be called after the function has returned (e.g. after a delay), it must be marked as escaping."]}, {"tag": "extension_", "patterns": ["What is the difference between an extension and a protocol extension?"], "responses": ["Extensions add functionality to specific data types, e.g. Int. Protocol extensions add functionality to protocols, for example all kinds of integers at the same time \u2013 Int, Int8, UInt64, and so on."]}, {"tag": "defer_", "patterns": ["When would you use the defer keyword in Swift?"], "responses": ["Go straight in with a clear explanation before adding more detail: this is used to delay a piece of work until a function ends, similar to how try/finally works in some other languages."]}, {"tag": "swift_", "patterns": ["How would you explain key paths to a new Swift developer?"], "responses": ["Start with the simplest explanation then you can, then try to follow up with practical examples."]}, {"tag": "conformances_", "patterns": ["What are conditional conformances?"], "responses": ["You should already know that protocol conformances allow us to say that one type conforms to a protocol such as Hashable or Equatable, but this question is asking about conditional conformances \u2013 conforming to a protocol only if a condition is true. Make sure and give a practical example, such as Array conforming to a Purchaseable protocol only if it contains elements that also conform to Purchaseable."]}, {"tag": "opaque_", "patterns": ["What are opaque return types?"], "responses": ["Whenever you see some in a return type, it\u2019s an opaque return type \u2013 when you want to specify that some kind of type will be returned, but you don\u2019t want to say what."]}, {"tag": "swift_", "patterns": ["What are result builders and when are they used in Swift?"], "responses": ["This is an advanced question, so take your time. Start with a basic definition: result builders allow us to create a new value step by step by passing in a sequence of our choosing."]}, {"tag": "targetenvironment_", "patterns": ["What does the targetEnvironment() compiler condition do?"], "responses": ["Get straight to the point and say it allows us to compile one set of code for the simulator, and another set of code for physical devices. Make sure and follow up with a practical example, such as a game that uses Core Motion to handle tilting movement on a real device, whereas on the simulator you need to tap the screen to simulate motion."]}, {"tag": "self_", "patterns": ["What is the difference between self and Self?"], "responses": ["Almost every Swift developer uses self regularly, but the question here requires to distinguish between that and the capitalized version. Start with self, which refers to the current object your code is running inside, then move on to Self, which refers to the current type your code is running inside. You can remember this by looking at the capital letter: we name our types using a capital first letter, so Self refers to a type."]}, {"tag": "autoclosure_", "patterns": ["When would you use @autoclosure?"], "responses": ["There are a few ways you could tackle this, but I would recommend either talking about the && operator or the assert() function \u2013 something you use regularly, and so feel comfortable talking about in detail."]}, {"tag": "swiftui_", "patterns": ["How would you explain SwiftUI\u2019s environment to a new developer?"], "responses": ["I would suggest you start off nice and broad, and say that the environment acts a bit like a singleton manager \u2013\u00a0you place objects in there and share them in many places. But then you want to dive into the details a little more, perhaps saying that actually you can subdivide the environment if you want, allowing some views to have different environment objects."]}, {"tag": "property_", "patterns": ["What does the @Published property wrapper do?"], "responses": ["As with many questions, the best answer here starts with a simple definition (when used inside an ObservableObject an @Published property will automatically send out change notifications when its value changes), then diving into a practical example. So, you might say that a class you\u2019re using in SwiftUI has an array of todo list items, and when that array changes the UI should update \u2013\u00a0a simple, real-world use for @Published."]}, {"tag": "property_", "patterns": ["What does the @State property wrapper do?"], "responses": ["Remember to start with a basic definition first, then provide a practical example. Here, that means saying the @State allows us to mutate a value that belongs to a struct without using mutating methods. When it comes to a practical example, almost any kind of value-type SwiftUI binding is good, such as storing text in a TextField."]}, {"tag": "initializer_", "patterns": ["What's the difference between a view's initializer and onAppear()?"], "responses": ["Using init() and onAppear() both let us run some code early in a view's lifecycle, however it's important to understand the difference between them."]}, {"tag": "observedobject_", "patterns": ["When would you use @StateObject versus @ObservedObject?"], "responses": ["I would recommend you start by making the similarities and differences clear, then sum up by answering the question directly. So, you would say that both of these property wrappers monitor an observable object for changes, and refresh SwiftUI views when changes happen. However, @StateObject is used when you create an object for the first time and want to retain ownership of it, whereas @ObservableObject is used in other places where you pass the object and does not retain ownership."]}, {"tag": "swiftui_", "patterns": ["How can an observable object announce changes to SwiftUI?"], "responses": ["There are two primary ways this is done: using the @Published property wrapper, or by calling objectWillChange.send() directly."]}, {"tag": "swiftui_", "patterns": ["How would you create programmatic navigation in SwiftUI?"], "responses": ["SwiftUI makes simple navigation as easy as it should be, but programmatic navigation is trickier because you need to declare all your states up front."]}, {"tag": "buttonstyle_", "patterns": ["What is the purpose of the ButtonStyle protocol?"], "responses": ["SwiftUI provides several built-in button styles depending on which platform you're targetting, and the ButtonStyle protocol allows us to create new button styles that can be reused across our apps to get consistent designs."]}, {"tag": "geometryreader_", "patterns": ["When would you use GeometryReader?"], "responses": ["Start with the simplest answer and work your way up: GeometryReader allows us to read the size and location of a view, which means we can create proportional layouts or create adaptive modifiers that change their values as a view moves around the screen."]}, {"tag": "swiftui_", "patterns": ["Why does SwiftUI use structs for views?"], "responses": ["Start with the easiest answer, then work your way up: structs are used because they are much simpler and much more efficient than classes. Once you've nailed the basics, go on to discuss why this matters \u2013 SwiftUI is free to recreate your view structs whenever and as often as it wants, so performance needs to be good."]}, {"tag": "xibs_", "patterns": ["How are XIBs different from storyboards?"], "responses": ["Once you\u2019ve described how storyboards contain many screens at once, don\u2019t be afraid to wade into the debate: which do you prefer? Let them know you\u2019ve thought about it, even if you end up with saying you\u2019re glad SwiftUI doesn\u2019t use them."]}, {"tag": "uikit_", "patterns": ["How would you explain UIKit segues to a new iOS developer?"], "responses": ["Segues let us change the currently active view controller. Give specific examples of where they are used, such as moving forward through view controllers, or perhaps using unwind segues."]}, {"tag": "storyboard_", "patterns": ["What are storyboard identifiers for?"], "responses": ["Storyboard identifiers allow us to reference one specific view controller inside a storyboard, usually so that we can create an instance of it. Unless a view controller is marked as the initial view controller for a storyboard, giving it an identifier is the only way to reference it in code."]}, {"tag": "controllers_", "patterns": ["What are the benefits of using child view controllers?"], "responses": ["We all know that view controllers can grow to hideous proportions, so I think the best approach here is to acknowledge that and present child view controllers as one solution\u00a0\u2013\u00a0they provide the ability to carve off parts of your UI into smaller chunks, retaining all the same functionality but making your code smaller and simpler. It\u2019s also worth mentioning how child view controllers can also make our code more reusable, because the child can be used in other parent view controllers."]}, {"tag": "viewwithtag_", "patterns": ["What are the pros and cons of using viewWithTag()?"], "responses": ["The only real pro is that it\u2019s an easy fix to finding a view, used particularly when you don\u2019t want to bother creating a custom table view cell class. However, it\u2019s obviously flaky because the tag number might change in the future, and it\u2019s never nice having magic numbers in your code. Use with care!"]}, {"tag": "ibaction_", "patterns": ["What is the difference between @IBOutlet and @IBAction?"], "responses": ["One is a property the other is a method, but both are effectively just empty markers that help Interface Builder recognize parts of our code that are relevant to it."]}, {"tag": "uiimageview_", "patterns": ["What is the difference between a UIImage and a UIImageView?"], "responses": ["Images hold uncompressed graphics data ready to draw, image views display image data at a specific location on the screen. You can use this opportunity to talk about models (an image) versus views (an image view), and \u2013\u00a0if you're able to \u2013\u00a0how this distinction has disappeared in SwiftUI."]}, {"tag": "aspect_", "patterns": ["What is the difference between aspect fill and aspect fit when displaying an image?"], "responses": ["Although these two sound similar, there is an important difference: aspect fit ensures all parts of the image are visible even if it means there is some space around the edges, whereas aspect fill may crop the image to ensure it takes up all available space."]}, {"tag": "uiactivityviewcontroller_", "patterns": ["What is the purpose of UIActivityViewController?"], "responses": ["This UIKit class has only one function: sharing your app\u2019s content using whatever other apps the user has. This might mean printing, posting to social media, saving an image to your photo library, and so on."]}, {"tag": "uivisualeffectview_", "patterns": ["What is the purpose of UIVisualEffectView?"], "responses": ["This is used to blur backgrounds, either light or dark, so that text can be overlaid more easily. You can optionally enable vibrancy, which causes the text to be rendered in a bright, contrasting color alongside the blur."]}, {"tag": "identifiers_", "patterns": ["What is the purpose of reuse identifiers for table view cells?"], "responses": ["The answer is pretty simple (major performance increase by not creating new cells as the user scrolls), but you could also use this opportunity to talk about downsides \u2013\u00a0if you modify a cell then try to reuse it, your modifications stay intact."]}, {"tag": "collection_", "patterns": ["When would you choose to use a collection view rather than a table view?"], "responses": ["Collection views are there to display grids, but also handle entirely custom layouts, whereas table views are simple linear lists with headers and footers."]}, {"tag": "uikit_", "patterns": ["Which parts of UIKit are you least familiar with?"], "responses": ["This is a difficult one because you don\u2019t particularly want to name something they use a lot. Unless you're feeling brave, consider options like UIPageViewController or UIVisualEffectView, because they aren\u2019t used quite so often."]}, {"tag": "intrinsic_", "patterns": ["How does a view's intrinsic content size aid in Auto Layout?"], "responses": ["It describes how much space the view needs to lay out its content naturally, such as the amount of space some text needs to be fitted exactly."]}, {"tag": "anchors_", "patterns": ["What is the function of anchors in Auto Layout?"], "responses": ["Anchors are one way of expressing Auto Layout constraints, and are neatly concise: this width should be the same as that width, this leading edge should be aligned to that leading edge, and so on. If you haven\u2019t used them before, at least be prepared to discuss what you\u2019d use instead."]}, {"tag": "ibdesignable_", "patterns": ["What is the purpose of IBDesignable?"], "responses": ["Marking a custom view as IBDesignable allows Xcode to render a preview of it when editing storyboards. It's useful when you create your own custom view subclasses and want to see them rendered live in IB, particularly when you want to set their properties there too."]}, {"tag": "uimenucontroller_", "patterns": ["What is the purpose of UIMenuController?"], "responses": ["These are the small, black popup menus that appear when you interact with text fields, for example \u2013\u00a0think Cut and Paste. You can attach your own actions if you want, although the API isn't particularly pleasant."]}]}